/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.theguardian.bridget.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)")
public class Gallery {

  public interface Iface {

    public void launchSlideshow(java.util.List<Image> images, int selectedIndex, java.lang.String articleTitle) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void launchSlideshow(java.util.List<Image> images, int selectedIndex, java.lang.String articleTitle, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void launchSlideshow(java.util.List<Image> images, int selectedIndex, java.lang.String articleTitle) throws org.apache.thrift.TException
    {
      send_launchSlideshow(images, selectedIndex, articleTitle);
      recv_launchSlideshow();
    }

    public void send_launchSlideshow(java.util.List<Image> images, int selectedIndex, java.lang.String articleTitle) throws org.apache.thrift.TException
    {
      launchSlideshow_args args = new launchSlideshow_args();
      args.setImages(images);
      args.setSelectedIndex(selectedIndex);
      args.setArticleTitle(articleTitle);
      sendBase("launchSlideshow", args);
    }

    public void recv_launchSlideshow() throws org.apache.thrift.TException
    {
      launchSlideshow_result result = new launchSlideshow_result();
      receiveBase(result, "launchSlideshow");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void launchSlideshow(java.util.List<Image> images, int selectedIndex, java.lang.String articleTitle, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      launchSlideshow_call method_call = new launchSlideshow_call(images, selectedIndex, articleTitle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class launchSlideshow_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<Image> images;
      private int selectedIndex;
      private java.lang.String articleTitle;
      public launchSlideshow_call(java.util.List<Image> images, int selectedIndex, java.lang.String articleTitle, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.images = images;
        this.selectedIndex = selectedIndex;
        this.articleTitle = articleTitle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("launchSlideshow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        launchSlideshow_args args = new launchSlideshow_args();
        args.setImages(images);
        args.setSelectedIndex(selectedIndex);
        args.setArticleTitle(articleTitle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("launchSlideshow", new launchSlideshow());
      return processMap;
    }

    public static class launchSlideshow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, launchSlideshow_args> {
      public launchSlideshow() {
        super("launchSlideshow");
      }

      public launchSlideshow_args getEmptyArgsInstance() {
        return new launchSlideshow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public launchSlideshow_result getResult(I iface, launchSlideshow_args args) throws org.apache.thrift.TException {
        launchSlideshow_result result = new launchSlideshow_result();
        iface.launchSlideshow(args.images, args.selectedIndex, args.articleTitle);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("launchSlideshow", new launchSlideshow());
      return processMap;
    }

    public static class launchSlideshow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, launchSlideshow_args, Void> {
      public launchSlideshow() {
        super("launchSlideshow");
      }

      public launchSlideshow_args getEmptyArgsInstance() {
        return new launchSlideshow_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            launchSlideshow_result result = new launchSlideshow_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            launchSlideshow_result result = new launchSlideshow_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, launchSlideshow_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.launchSlideshow(args.images, args.selectedIndex, args.articleTitle,resultHandler);
      }
    }

  }

  public static class launchSlideshow_args implements org.apache.thrift.TBase<launchSlideshow_args, launchSlideshow_args._Fields>, java.io.Serializable, Cloneable, Comparable<launchSlideshow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchSlideshow_args");

    private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SELECTED_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("selectedIndex", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ARTICLE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("articleTitle", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new launchSlideshow_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new launchSlideshow_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Image> images; // required
    public int selectedIndex; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String articleTitle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGES((short)1, "images"),
      SELECTED_INDEX((short)2, "selectedIndex"),
      ARTICLE_TITLE((short)3, "articleTitle");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGES
            return IMAGES;
          case 2: // SELECTED_INDEX
            return SELECTED_INDEX;
          case 3: // ARTICLE_TITLE
            return ARTICLE_TITLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SELECTEDINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Image.class))));
      tmpMap.put(_Fields.SELECTED_INDEX, new org.apache.thrift.meta_data.FieldMetaData("selectedIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ARTICLE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("articleTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchSlideshow_args.class, metaDataMap);
    }

    public launchSlideshow_args() {
    }

    public launchSlideshow_args(
      java.util.List<Image> images,
      int selectedIndex,
      java.lang.String articleTitle)
    {
      this();
      this.images = images;
      this.selectedIndex = selectedIndex;
      setSelectedIndexIsSet(true);
      this.articleTitle = articleTitle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchSlideshow_args(launchSlideshow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetImages()) {
        java.util.List<Image> __this__images = new java.util.ArrayList<Image>(other.images.size());
        for (Image other_element : other.images) {
          __this__images.add(new Image(other_element));
        }
        this.images = __this__images;
      }
      this.selectedIndex = other.selectedIndex;
      if (other.isSetArticleTitle()) {
        this.articleTitle = other.articleTitle;
      }
    }

    public launchSlideshow_args deepCopy() {
      return new launchSlideshow_args(this);
    }

    @Override
    public void clear() {
      this.images = null;
      setSelectedIndexIsSet(false);
      this.selectedIndex = 0;
      this.articleTitle = null;
    }

    public int getImagesSize() {
      return (this.images == null) ? 0 : this.images.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Image> getImagesIterator() {
      return (this.images == null) ? null : this.images.iterator();
    }

    public void addToImages(Image elem) {
      if (this.images == null) {
        this.images = new java.util.ArrayList<Image>();
      }
      this.images.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Image> getImages() {
      return this.images;
    }

    public launchSlideshow_args setImages(@org.apache.thrift.annotation.Nullable java.util.List<Image> images) {
      this.images = images;
      return this;
    }

    public void unsetImages() {
      this.images = null;
    }

    /** Returns true if field images is set (has been assigned a value) and false otherwise */
    public boolean isSetImages() {
      return this.images != null;
    }

    public void setImagesIsSet(boolean value) {
      if (!value) {
        this.images = null;
      }
    }

    public int getSelectedIndex() {
      return this.selectedIndex;
    }

    public launchSlideshow_args setSelectedIndex(int selectedIndex) {
      this.selectedIndex = selectedIndex;
      setSelectedIndexIsSet(true);
      return this;
    }

    public void unsetSelectedIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELECTEDINDEX_ISSET_ID);
    }

    /** Returns true if field selectedIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectedIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELECTEDINDEX_ISSET_ID);
    }

    public void setSelectedIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELECTEDINDEX_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getArticleTitle() {
      return this.articleTitle;
    }

    public launchSlideshow_args setArticleTitle(@org.apache.thrift.annotation.Nullable java.lang.String articleTitle) {
      this.articleTitle = articleTitle;
      return this;
    }

    public void unsetArticleTitle() {
      this.articleTitle = null;
    }

    /** Returns true if field articleTitle is set (has been assigned a value) and false otherwise */
    public boolean isSetArticleTitle() {
      return this.articleTitle != null;
    }

    public void setArticleTitleIsSet(boolean value) {
      if (!value) {
        this.articleTitle = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case IMAGES:
        if (value == null) {
          unsetImages();
        } else {
          setImages((java.util.List<Image>)value);
        }
        break;

      case SELECTED_INDEX:
        if (value == null) {
          unsetSelectedIndex();
        } else {
          setSelectedIndex((java.lang.Integer)value);
        }
        break;

      case ARTICLE_TITLE:
        if (value == null) {
          unsetArticleTitle();
        } else {
          setArticleTitle((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGES:
        return getImages();

      case SELECTED_INDEX:
        return getSelectedIndex();

      case ARTICLE_TITLE:
        return getArticleTitle();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IMAGES:
        return isSetImages();
      case SELECTED_INDEX:
        return isSetSelectedIndex();
      case ARTICLE_TITLE:
        return isSetArticleTitle();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof launchSlideshow_args)
        return this.equals((launchSlideshow_args)that);
      return false;
    }

    public boolean equals(launchSlideshow_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_images = true && this.isSetImages();
      boolean that_present_images = true && that.isSetImages();
      if (this_present_images || that_present_images) {
        if (!(this_present_images && that_present_images))
          return false;
        if (!this.images.equals(that.images))
          return false;
      }

      boolean this_present_selectedIndex = true;
      boolean that_present_selectedIndex = true;
      if (this_present_selectedIndex || that_present_selectedIndex) {
        if (!(this_present_selectedIndex && that_present_selectedIndex))
          return false;
        if (this.selectedIndex != that.selectedIndex)
          return false;
      }

      boolean this_present_articleTitle = true && this.isSetArticleTitle();
      boolean that_present_articleTitle = true && that.isSetArticleTitle();
      if (this_present_articleTitle || that_present_articleTitle) {
        if (!(this_present_articleTitle && that_present_articleTitle))
          return false;
        if (!this.articleTitle.equals(that.articleTitle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetImages()) ? 131071 : 524287);
      if (isSetImages())
        hashCode = hashCode * 8191 + images.hashCode();

      hashCode = hashCode * 8191 + selectedIndex;

      hashCode = hashCode * 8191 + ((isSetArticleTitle()) ? 131071 : 524287);
      if (isSetArticleTitle())
        hashCode = hashCode * 8191 + articleTitle.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(launchSlideshow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetImages(), other.isSetImages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSelectedIndex(), other.isSetSelectedIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectedIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectedIndex, other.selectedIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetArticleTitle(), other.isSetArticleTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArticleTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleTitle, other.articleTitle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("launchSlideshow_args(");
      boolean first = true;

      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("selectedIndex:");
      sb.append(this.selectedIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("articleTitle:");
      if (this.articleTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.articleTitle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchSlideshow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchSlideshow_argsStandardScheme getScheme() {
        return new launchSlideshow_argsStandardScheme();
      }
    }

    private static class launchSlideshow_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<launchSlideshow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchSlideshow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.images = new java.util.ArrayList<Image>(_list50.size);
                  @org.apache.thrift.annotation.Nullable Image _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = new Image();
                    _elem51.read(iprot);
                    struct.images.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setImagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SELECTED_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.selectedIndex = iprot.readI32();
                struct.setSelectedIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARTICLE_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.articleTitle = iprot.readString();
                struct.setArticleTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchSlideshow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.images != null) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.images.size()));
            for (Image _iter53 : struct.images)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SELECTED_INDEX_FIELD_DESC);
        oprot.writeI32(struct.selectedIndex);
        oprot.writeFieldEnd();
        if (struct.articleTitle != null) {
          oprot.writeFieldBegin(ARTICLE_TITLE_FIELD_DESC);
          oprot.writeString(struct.articleTitle);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchSlideshow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchSlideshow_argsTupleScheme getScheme() {
        return new launchSlideshow_argsTupleScheme();
      }
    }

    private static class launchSlideshow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<launchSlideshow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchSlideshow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetImages()) {
          optionals.set(0);
        }
        if (struct.isSetSelectedIndex()) {
          optionals.set(1);
        }
        if (struct.isSetArticleTitle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetImages()) {
          {
            oprot.writeI32(struct.images.size());
            for (Image _iter54 : struct.images)
            {
              _iter54.write(oprot);
            }
          }
        }
        if (struct.isSetSelectedIndex()) {
          oprot.writeI32(struct.selectedIndex);
        }
        if (struct.isSetArticleTitle()) {
          oprot.writeString(struct.articleTitle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchSlideshow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.images = new java.util.ArrayList<Image>(_list55.size);
            @org.apache.thrift.annotation.Nullable Image _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = new Image();
              _elem56.read(iprot);
              struct.images.add(_elem56);
            }
          }
          struct.setImagesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.selectedIndex = iprot.readI32();
          struct.setSelectedIndexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.articleTitle = iprot.readString();
          struct.setArticleTitleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class launchSlideshow_result implements org.apache.thrift.TBase<launchSlideshow_result, launchSlideshow_result._Fields>, java.io.Serializable, Cloneable, Comparable<launchSlideshow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchSlideshow_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new launchSlideshow_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new launchSlideshow_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchSlideshow_result.class, metaDataMap);
    }

    public launchSlideshow_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchSlideshow_result(launchSlideshow_result other) {
    }

    public launchSlideshow_result deepCopy() {
      return new launchSlideshow_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof launchSlideshow_result)
        return this.equals((launchSlideshow_result)that);
      return false;
    }

    public boolean equals(launchSlideshow_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(launchSlideshow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("launchSlideshow_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchSlideshow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchSlideshow_resultStandardScheme getScheme() {
        return new launchSlideshow_resultStandardScheme();
      }
    }

    private static class launchSlideshow_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<launchSlideshow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchSlideshow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchSlideshow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchSlideshow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchSlideshow_resultTupleScheme getScheme() {
        return new launchSlideshow_resultTupleScheme();
      }
    }

    private static class launchSlideshow_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<launchSlideshow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchSlideshow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchSlideshow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
