/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.theguardian.bridget.thrift;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Newsletters {

  /**
   * Service to manage requests from the weblayer related to newsletter subscriptions.
   * added  version 2.0.0
   * methods:
   *  - requestSignUp: request to sign up to a newsletter using an email address entered by the user.
   * Returns `true` if the request was successful, `false` if it failed for any reason. Exceptions
   * thrown will be discarded.
   */
  public interface Iface {

    public boolean requestSignUp(java.lang.String emailAddress, java.lang.String newsletterIdentityName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void requestSignUp(java.lang.String emailAddress, java.lang.String newsletterIdentityName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public boolean requestSignUp(java.lang.String emailAddress, java.lang.String newsletterIdentityName) throws org.apache.thrift.TException
    {
      send_requestSignUp(emailAddress, newsletterIdentityName);
      return recv_requestSignUp();
    }

    public void send_requestSignUp(java.lang.String emailAddress, java.lang.String newsletterIdentityName) throws org.apache.thrift.TException
    {
      requestSignUp_args args = new requestSignUp_args();
      args.setEmailAddress(emailAddress);
      args.setNewsletterIdentityName(newsletterIdentityName);
      sendBase("requestSignUp", args);
    }

    public boolean recv_requestSignUp() throws org.apache.thrift.TException
    {
      requestSignUp_result result = new requestSignUp_result();
      receiveBase(result, "requestSignUp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestSignUp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void requestSignUp(java.lang.String emailAddress, java.lang.String newsletterIdentityName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestSignUp_call method_call = new requestSignUp_call(emailAddress, newsletterIdentityName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestSignUp_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String emailAddress;
      private java.lang.String newsletterIdentityName;
      public requestSignUp_call(java.lang.String emailAddress, java.lang.String newsletterIdentityName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emailAddress = emailAddress;
        this.newsletterIdentityName = newsletterIdentityName;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestSignUp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestSignUp_args args = new requestSignUp_args();
        args.setEmailAddress(emailAddress);
        args.setNewsletterIdentityName(newsletterIdentityName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestSignUp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("requestSignUp", new requestSignUp());
      return processMap;
    }

    public static class requestSignUp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestSignUp_args, requestSignUp_result> {
      public requestSignUp() {
        super("requestSignUp");
      }

      @Override
      public requestSignUp_args getEmptyArgsInstance() {
        return new requestSignUp_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public requestSignUp_result getEmptyResultInstance() {
        return new requestSignUp_result();
      }

      @Override
      public requestSignUp_result getResult(I iface, requestSignUp_args args) throws org.apache.thrift.TException {
        requestSignUp_result result = getEmptyResultInstance();
        result.success = iface.requestSignUp(args.emailAddress, args.newsletterIdentityName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("requestSignUp", new requestSignUp());
      return processMap;
    }

    public static class requestSignUp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestSignUp_args, java.lang.Boolean, requestSignUp_result> {
      public requestSignUp() {
        super("requestSignUp");
      }

      @Override
      public requestSignUp_result getEmptyResultInstance() {
        return new requestSignUp_result();
      }

      @Override
      public requestSignUp_args getEmptyArgsInstance() {
        return new requestSignUp_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            requestSignUp_result result = new requestSignUp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestSignUp_result result = new requestSignUp_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, requestSignUp_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.requestSignUp(args.emailAddress, args.newsletterIdentityName,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class requestSignUp_args implements org.apache.thrift.TBase<requestSignUp_args, requestSignUp_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestSignUp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSignUp_args");

    private static final org.apache.thrift.protocol.TField EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEWSLETTER_IDENTITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newsletterIdentityName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestSignUp_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestSignUp_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String emailAddress; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String newsletterIdentityName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL_ADDRESS((short)1, "emailAddress"),
      NEWSLETTER_IDENTITY_NAME((short)2, "newsletterIdentityName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL_ADDRESS
            return EMAIL_ADDRESS;
          case 2: // NEWSLETTER_IDENTITY_NAME
            return NEWSLETTER_IDENTITY_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("emailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEWSLETTER_IDENTITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("newsletterIdentityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSignUp_args.class, metaDataMap);
    }

    public requestSignUp_args() {
    }

    public requestSignUp_args(
      java.lang.String emailAddress,
      java.lang.String newsletterIdentityName)
    {
      this();
      this.emailAddress = emailAddress;
      this.newsletterIdentityName = newsletterIdentityName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSignUp_args(requestSignUp_args other) {
      if (other.isSetEmailAddress()) {
        this.emailAddress = other.emailAddress;
      }
      if (other.isSetNewsletterIdentityName()) {
        this.newsletterIdentityName = other.newsletterIdentityName;
      }
    }

    @Override
    public requestSignUp_args deepCopy() {
      return new requestSignUp_args(this);
    }

    @Override
    public void clear() {
      this.emailAddress = null;
      this.newsletterIdentityName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEmailAddress() {
      return this.emailAddress;
    }

    public requestSignUp_args setEmailAddress(@org.apache.thrift.annotation.Nullable java.lang.String emailAddress) {
      this.emailAddress = emailAddress;
      return this;
    }

    public void unsetEmailAddress() {
      this.emailAddress = null;
    }

    /** Returns true if field emailAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailAddress() {
      return this.emailAddress != null;
    }

    public void setEmailAddressIsSet(boolean value) {
      if (!value) {
        this.emailAddress = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getNewsletterIdentityName() {
      return this.newsletterIdentityName;
    }

    public requestSignUp_args setNewsletterIdentityName(@org.apache.thrift.annotation.Nullable java.lang.String newsletterIdentityName) {
      this.newsletterIdentityName = newsletterIdentityName;
      return this;
    }

    public void unsetNewsletterIdentityName() {
      this.newsletterIdentityName = null;
    }

    /** Returns true if field newsletterIdentityName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewsletterIdentityName() {
      return this.newsletterIdentityName != null;
    }

    public void setNewsletterIdentityNameIsSet(boolean value) {
      if (!value) {
        this.newsletterIdentityName = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMAIL_ADDRESS:
        if (value == null) {
          unsetEmailAddress();
        } else {
          setEmailAddress((java.lang.String)value);
        }
        break;

      case NEWSLETTER_IDENTITY_NAME:
        if (value == null) {
          unsetNewsletterIdentityName();
        } else {
          setNewsletterIdentityName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL_ADDRESS:
        return getEmailAddress();

      case NEWSLETTER_IDENTITY_NAME:
        return getNewsletterIdentityName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMAIL_ADDRESS:
        return isSetEmailAddress();
      case NEWSLETTER_IDENTITY_NAME:
        return isSetNewsletterIdentityName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof requestSignUp_args)
        return this.equals((requestSignUp_args)that);
      return false;
    }

    public boolean equals(requestSignUp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_emailAddress = true && this.isSetEmailAddress();
      boolean that_present_emailAddress = true && that.isSetEmailAddress();
      if (this_present_emailAddress || that_present_emailAddress) {
        if (!(this_present_emailAddress && that_present_emailAddress))
          return false;
        if (!this.emailAddress.equals(that.emailAddress))
          return false;
      }

      boolean this_present_newsletterIdentityName = true && this.isSetNewsletterIdentityName();
      boolean that_present_newsletterIdentityName = true && that.isSetNewsletterIdentityName();
      if (this_present_newsletterIdentityName || that_present_newsletterIdentityName) {
        if (!(this_present_newsletterIdentityName && that_present_newsletterIdentityName))
          return false;
        if (!this.newsletterIdentityName.equals(that.newsletterIdentityName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmailAddress()) ? 131071 : 524287);
      if (isSetEmailAddress())
        hashCode = hashCode * 8191 + emailAddress.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewsletterIdentityName()) ? 131071 : 524287);
      if (isSetNewsletterIdentityName())
        hashCode = hashCode * 8191 + newsletterIdentityName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestSignUp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEmailAddress(), other.isSetEmailAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAddress, other.emailAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNewsletterIdentityName(), other.isSetNewsletterIdentityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewsletterIdentityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsletterIdentityName, other.newsletterIdentityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestSignUp_args(");
      boolean first = true;

      sb.append("emailAddress:");
      if (this.emailAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.emailAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newsletterIdentityName:");
      if (this.newsletterIdentityName == null) {
        sb.append("null");
      } else {
        sb.append(this.newsletterIdentityName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSignUp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public requestSignUp_argsStandardScheme getScheme() {
        return new requestSignUp_argsStandardScheme();
      }
    }

    private static class requestSignUp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestSignUp_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSignUp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emailAddress = iprot.readString();
                struct.setEmailAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEWSLETTER_IDENTITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newsletterIdentityName = iprot.readString();
                struct.setNewsletterIdentityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSignUp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emailAddress != null) {
          oprot.writeFieldBegin(EMAIL_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.emailAddress);
          oprot.writeFieldEnd();
        }
        if (struct.newsletterIdentityName != null) {
          oprot.writeFieldBegin(NEWSLETTER_IDENTITY_NAME_FIELD_DESC);
          oprot.writeString(struct.newsletterIdentityName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSignUp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public requestSignUp_argsTupleScheme getScheme() {
        return new requestSignUp_argsTupleScheme();
      }
    }

    private static class requestSignUp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestSignUp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSignUp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmailAddress()) {
          optionals.set(0);
        }
        if (struct.isSetNewsletterIdentityName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmailAddress()) {
          oprot.writeString(struct.emailAddress);
        }
        if (struct.isSetNewsletterIdentityName()) {
          oprot.writeString(struct.newsletterIdentityName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSignUp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.emailAddress = iprot.readString();
          struct.setEmailAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newsletterIdentityName = iprot.readString();
          struct.setNewsletterIdentityNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class requestSignUp_result implements org.apache.thrift.TBase<requestSignUp_result, requestSignUp_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestSignUp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSignUp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestSignUp_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestSignUp_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSignUp_result.class, metaDataMap);
    }

    public requestSignUp_result() {
    }

    public requestSignUp_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSignUp_result(requestSignUp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public requestSignUp_result deepCopy() {
      return new requestSignUp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public requestSignUp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof requestSignUp_result)
        return this.equals((requestSignUp_result)that);
      return false;
    }

    public boolean equals(requestSignUp_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(requestSignUp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestSignUp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSignUp_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public requestSignUp_resultStandardScheme getScheme() {
        return new requestSignUp_resultStandardScheme();
      }
    }

    private static class requestSignUp_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestSignUp_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSignUp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSignUp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSignUp_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public requestSignUp_resultTupleScheme getScheme() {
        return new requestSignUp_resultTupleScheme();
      }
    }

    private static class requestSignUp_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestSignUp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSignUp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSignUp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
