/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.theguardian.bridget.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)")
public class DiscussionUserProfile implements org.apache.thrift.TBase<DiscussionUserProfile, DiscussionUserProfile._Fields>, java.io.Serializable, Cloneable, Comparable<DiscussionUserProfile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DiscussionUserProfile");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WEB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("webUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField API_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("apiUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SECURE_AVATAR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("secureAvatarUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BADGE_FIELD_DESC = new org.apache.thrift.protocol.TField("badge", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CAN_POST_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("canPostComment", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_PREMODERATED_FIELD_DESC = new org.apache.thrift.protocol.TField("isPremoderated", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField HAS_COMMENTED_FIELD_DESC = new org.apache.thrift.protocol.TField("hasCommented", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DiscussionUserProfileStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DiscussionUserProfileTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String userId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String displayName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String webUrl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String apiUrl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String avatar; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String secureAvatarUrl; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<DiscussionBadge> badge; // required
  public boolean canPostComment; // required
  public boolean isPremoderated; // required
  public boolean hasCommented; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    DISPLAY_NAME((short)2, "displayName"),
    WEB_URL((short)3, "webUrl"),
    API_URL((short)4, "apiUrl"),
    AVATAR((short)5, "avatar"),
    SECURE_AVATAR_URL((short)6, "secureAvatarUrl"),
    BADGE((short)7, "badge"),
    CAN_POST_COMMENT((short)8, "canPostComment"),
    IS_PREMODERATED((short)9, "isPremoderated"),
    HAS_COMMENTED((short)10, "hasCommented");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 3: // WEB_URL
          return WEB_URL;
        case 4: // API_URL
          return API_URL;
        case 5: // AVATAR
          return AVATAR;
        case 6: // SECURE_AVATAR_URL
          return SECURE_AVATAR_URL;
        case 7: // BADGE
          return BADGE;
        case 8: // CAN_POST_COMMENT
          return CAN_POST_COMMENT;
        case 9: // IS_PREMODERATED
          return IS_PREMODERATED;
        case 10: // HAS_COMMENTED
          return HAS_COMMENTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CANPOSTCOMMENT_ISSET_ID = 0;
  private static final int __ISPREMODERATED_ISSET_ID = 1;
  private static final int __HASCOMMENTED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEB_URL, new org.apache.thrift.meta_data.FieldMetaData("webUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_URL, new org.apache.thrift.meta_data.FieldMetaData("apiUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECURE_AVATAR_URL, new org.apache.thrift.meta_data.FieldMetaData("secureAvatarUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BADGE, new org.apache.thrift.meta_data.FieldMetaData("badge", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscussionBadge.class))));
    tmpMap.put(_Fields.CAN_POST_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("canPostComment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PREMODERATED, new org.apache.thrift.meta_data.FieldMetaData("isPremoderated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_COMMENTED, new org.apache.thrift.meta_data.FieldMetaData("hasCommented", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DiscussionUserProfile.class, metaDataMap);
  }

  public DiscussionUserProfile() {
  }

  public DiscussionUserProfile(
    java.lang.String userId,
    java.lang.String displayName,
    java.lang.String webUrl,
    java.lang.String apiUrl,
    java.lang.String avatar,
    java.lang.String secureAvatarUrl,
    java.util.List<DiscussionBadge> badge,
    boolean canPostComment,
    boolean isPremoderated,
    boolean hasCommented)
  {
    this();
    this.userId = userId;
    this.displayName = displayName;
    this.webUrl = webUrl;
    this.apiUrl = apiUrl;
    this.avatar = avatar;
    this.secureAvatarUrl = secureAvatarUrl;
    this.badge = badge;
    this.canPostComment = canPostComment;
    setCanPostCommentIsSet(true);
    this.isPremoderated = isPremoderated;
    setIsPremoderatedIsSet(true);
    this.hasCommented = hasCommented;
    setHasCommentedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DiscussionUserProfile(DiscussionUserProfile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetWebUrl()) {
      this.webUrl = other.webUrl;
    }
    if (other.isSetApiUrl()) {
      this.apiUrl = other.apiUrl;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetSecureAvatarUrl()) {
      this.secureAvatarUrl = other.secureAvatarUrl;
    }
    if (other.isSetBadge()) {
      java.util.List<DiscussionBadge> __this__badge = new java.util.ArrayList<DiscussionBadge>(other.badge.size());
      for (DiscussionBadge other_element : other.badge) {
        __this__badge.add(new DiscussionBadge(other_element));
      }
      this.badge = __this__badge;
    }
    this.canPostComment = other.canPostComment;
    this.isPremoderated = other.isPremoderated;
    this.hasCommented = other.hasCommented;
  }

  public DiscussionUserProfile deepCopy() {
    return new DiscussionUserProfile(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.displayName = null;
    this.webUrl = null;
    this.apiUrl = null;
    this.avatar = null;
    this.secureAvatarUrl = null;
    this.badge = null;
    setCanPostCommentIsSet(false);
    this.canPostComment = false;
    setIsPremoderatedIsSet(false);
    this.isPremoderated = false;
    setHasCommentedIsSet(false);
    this.hasCommented = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserId() {
    return this.userId;
  }

  public DiscussionUserProfile setUserId(@org.apache.thrift.annotation.Nullable java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDisplayName() {
    return this.displayName;
  }

  public DiscussionUserProfile setDisplayName(@org.apache.thrift.annotation.Nullable java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWebUrl() {
    return this.webUrl;
  }

  public DiscussionUserProfile setWebUrl(@org.apache.thrift.annotation.Nullable java.lang.String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  public void unsetWebUrl() {
    this.webUrl = null;
  }

  /** Returns true if field webUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWebUrl() {
    return this.webUrl != null;
  }

  public void setWebUrlIsSet(boolean value) {
    if (!value) {
      this.webUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getApiUrl() {
    return this.apiUrl;
  }

  public DiscussionUserProfile setApiUrl(@org.apache.thrift.annotation.Nullable java.lang.String apiUrl) {
    this.apiUrl = apiUrl;
    return this;
  }

  public void unsetApiUrl() {
    this.apiUrl = null;
  }

  /** Returns true if field apiUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetApiUrl() {
    return this.apiUrl != null;
  }

  public void setApiUrlIsSet(boolean value) {
    if (!value) {
      this.apiUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAvatar() {
    return this.avatar;
  }

  public DiscussionUserProfile setAvatar(@org.apache.thrift.annotation.Nullable java.lang.String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecureAvatarUrl() {
    return this.secureAvatarUrl;
  }

  public DiscussionUserProfile setSecureAvatarUrl(@org.apache.thrift.annotation.Nullable java.lang.String secureAvatarUrl) {
    this.secureAvatarUrl = secureAvatarUrl;
    return this;
  }

  public void unsetSecureAvatarUrl() {
    this.secureAvatarUrl = null;
  }

  /** Returns true if field secureAvatarUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetSecureAvatarUrl() {
    return this.secureAvatarUrl != null;
  }

  public void setSecureAvatarUrlIsSet(boolean value) {
    if (!value) {
      this.secureAvatarUrl = null;
    }
  }

  public int getBadgeSize() {
    return (this.badge == null) ? 0 : this.badge.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<DiscussionBadge> getBadgeIterator() {
    return (this.badge == null) ? null : this.badge.iterator();
  }

  public void addToBadge(DiscussionBadge elem) {
    if (this.badge == null) {
      this.badge = new java.util.ArrayList<DiscussionBadge>();
    }
    this.badge.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<DiscussionBadge> getBadge() {
    return this.badge;
  }

  public DiscussionUserProfile setBadge(@org.apache.thrift.annotation.Nullable java.util.List<DiscussionBadge> badge) {
    this.badge = badge;
    return this;
  }

  public void unsetBadge() {
    this.badge = null;
  }

  /** Returns true if field badge is set (has been assigned a value) and false otherwise */
  public boolean isSetBadge() {
    return this.badge != null;
  }

  public void setBadgeIsSet(boolean value) {
    if (!value) {
      this.badge = null;
    }
  }

  public boolean isCanPostComment() {
    return this.canPostComment;
  }

  public DiscussionUserProfile setCanPostComment(boolean canPostComment) {
    this.canPostComment = canPostComment;
    setCanPostCommentIsSet(true);
    return this;
  }

  public void unsetCanPostComment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANPOSTCOMMENT_ISSET_ID);
  }

  /** Returns true if field canPostComment is set (has been assigned a value) and false otherwise */
  public boolean isSetCanPostComment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANPOSTCOMMENT_ISSET_ID);
  }

  public void setCanPostCommentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANPOSTCOMMENT_ISSET_ID, value);
  }

  public boolean isIsPremoderated() {
    return this.isPremoderated;
  }

  public DiscussionUserProfile setIsPremoderated(boolean isPremoderated) {
    this.isPremoderated = isPremoderated;
    setIsPremoderatedIsSet(true);
    return this;
  }

  public void unsetIsPremoderated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPREMODERATED_ISSET_ID);
  }

  /** Returns true if field isPremoderated is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPremoderated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPREMODERATED_ISSET_ID);
  }

  public void setIsPremoderatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPREMODERATED_ISSET_ID, value);
  }

  public boolean isHasCommented() {
    return this.hasCommented;
  }

  public DiscussionUserProfile setHasCommented(boolean hasCommented) {
    this.hasCommented = hasCommented;
    setHasCommentedIsSet(true);
    return this;
  }

  public void unsetHasCommented() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASCOMMENTED_ISSET_ID);
  }

  /** Returns true if field hasCommented is set (has been assigned a value) and false otherwise */
  public boolean isSetHasCommented() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASCOMMENTED_ISSET_ID);
  }

  public void setHasCommentedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASCOMMENTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((java.lang.String)value);
      }
      break;

    case WEB_URL:
      if (value == null) {
        unsetWebUrl();
      } else {
        setWebUrl((java.lang.String)value);
      }
      break;

    case API_URL:
      if (value == null) {
        unsetApiUrl();
      } else {
        setApiUrl((java.lang.String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((java.lang.String)value);
      }
      break;

    case SECURE_AVATAR_URL:
      if (value == null) {
        unsetSecureAvatarUrl();
      } else {
        setSecureAvatarUrl((java.lang.String)value);
      }
      break;

    case BADGE:
      if (value == null) {
        unsetBadge();
      } else {
        setBadge((java.util.List<DiscussionBadge>)value);
      }
      break;

    case CAN_POST_COMMENT:
      if (value == null) {
        unsetCanPostComment();
      } else {
        setCanPostComment((java.lang.Boolean)value);
      }
      break;

    case IS_PREMODERATED:
      if (value == null) {
        unsetIsPremoderated();
      } else {
        setIsPremoderated((java.lang.Boolean)value);
      }
      break;

    case HAS_COMMENTED:
      if (value == null) {
        unsetHasCommented();
      } else {
        setHasCommented((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case DISPLAY_NAME:
      return getDisplayName();

    case WEB_URL:
      return getWebUrl();

    case API_URL:
      return getApiUrl();

    case AVATAR:
      return getAvatar();

    case SECURE_AVATAR_URL:
      return getSecureAvatarUrl();

    case BADGE:
      return getBadge();

    case CAN_POST_COMMENT:
      return isCanPostComment();

    case IS_PREMODERATED:
      return isIsPremoderated();

    case HAS_COMMENTED:
      return isHasCommented();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case WEB_URL:
      return isSetWebUrl();
    case API_URL:
      return isSetApiUrl();
    case AVATAR:
      return isSetAvatar();
    case SECURE_AVATAR_URL:
      return isSetSecureAvatarUrl();
    case BADGE:
      return isSetBadge();
    case CAN_POST_COMMENT:
      return isSetCanPostComment();
    case IS_PREMODERATED:
      return isSetIsPremoderated();
    case HAS_COMMENTED:
      return isSetHasCommented();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof DiscussionUserProfile)
      return this.equals((DiscussionUserProfile)that);
    return false;
  }

  public boolean equals(DiscussionUserProfile that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_webUrl = true && this.isSetWebUrl();
    boolean that_present_webUrl = true && that.isSetWebUrl();
    if (this_present_webUrl || that_present_webUrl) {
      if (!(this_present_webUrl && that_present_webUrl))
        return false;
      if (!this.webUrl.equals(that.webUrl))
        return false;
    }

    boolean this_present_apiUrl = true && this.isSetApiUrl();
    boolean that_present_apiUrl = true && that.isSetApiUrl();
    if (this_present_apiUrl || that_present_apiUrl) {
      if (!(this_present_apiUrl && that_present_apiUrl))
        return false;
      if (!this.apiUrl.equals(that.apiUrl))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_secureAvatarUrl = true && this.isSetSecureAvatarUrl();
    boolean that_present_secureAvatarUrl = true && that.isSetSecureAvatarUrl();
    if (this_present_secureAvatarUrl || that_present_secureAvatarUrl) {
      if (!(this_present_secureAvatarUrl && that_present_secureAvatarUrl))
        return false;
      if (!this.secureAvatarUrl.equals(that.secureAvatarUrl))
        return false;
    }

    boolean this_present_badge = true && this.isSetBadge();
    boolean that_present_badge = true && that.isSetBadge();
    if (this_present_badge || that_present_badge) {
      if (!(this_present_badge && that_present_badge))
        return false;
      if (!this.badge.equals(that.badge))
        return false;
    }

    boolean this_present_canPostComment = true;
    boolean that_present_canPostComment = true;
    if (this_present_canPostComment || that_present_canPostComment) {
      if (!(this_present_canPostComment && that_present_canPostComment))
        return false;
      if (this.canPostComment != that.canPostComment)
        return false;
    }

    boolean this_present_isPremoderated = true;
    boolean that_present_isPremoderated = true;
    if (this_present_isPremoderated || that_present_isPremoderated) {
      if (!(this_present_isPremoderated && that_present_isPremoderated))
        return false;
      if (this.isPremoderated != that.isPremoderated)
        return false;
    }

    boolean this_present_hasCommented = true;
    boolean that_present_hasCommented = true;
    if (this_present_hasCommented || that_present_hasCommented) {
      if (!(this_present_hasCommented && that_present_hasCommented))
        return false;
      if (this.hasCommented != that.hasCommented)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplayName()) ? 131071 : 524287);
    if (isSetDisplayName())
      hashCode = hashCode * 8191 + displayName.hashCode();

    hashCode = hashCode * 8191 + ((isSetWebUrl()) ? 131071 : 524287);
    if (isSetWebUrl())
      hashCode = hashCode * 8191 + webUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetApiUrl()) ? 131071 : 524287);
    if (isSetApiUrl())
      hashCode = hashCode * 8191 + apiUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetAvatar()) ? 131071 : 524287);
    if (isSetAvatar())
      hashCode = hashCode * 8191 + avatar.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecureAvatarUrl()) ? 131071 : 524287);
    if (isSetSecureAvatarUrl())
      hashCode = hashCode * 8191 + secureAvatarUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetBadge()) ? 131071 : 524287);
    if (isSetBadge())
      hashCode = hashCode * 8191 + badge.hashCode();

    hashCode = hashCode * 8191 + ((canPostComment) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isPremoderated) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((hasCommented) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(DiscussionUserProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUserId(), other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisplayName(), other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWebUrl(), other.isSetWebUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webUrl, other.webUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetApiUrl(), other.isSetApiUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiUrl, other.apiUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAvatar(), other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSecureAvatarUrl(), other.isSetSecureAvatarUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecureAvatarUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secureAvatarUrl, other.secureAvatarUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBadge(), other.isSetBadge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badge, other.badge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCanPostComment(), other.isSetCanPostComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanPostComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canPostComment, other.canPostComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsPremoderated(), other.isSetIsPremoderated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPremoderated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPremoderated, other.isPremoderated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHasCommented(), other.isSetHasCommented());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasCommented()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasCommented, other.hasCommented);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DiscussionUserProfile(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("webUrl:");
    if (this.webUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.webUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apiUrl:");
    if (this.apiUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.apiUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatar:");
    if (this.avatar == null) {
      sb.append("null");
    } else {
      sb.append(this.avatar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secureAvatarUrl:");
    if (this.secureAvatarUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.secureAvatarUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("badge:");
    if (this.badge == null) {
      sb.append("null");
    } else {
      sb.append(this.badge);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("canPostComment:");
    sb.append(this.canPostComment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPremoderated:");
    sb.append(this.isPremoderated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasCommented:");
    sb.append(this.hasCommented);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (userId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not present! Struct: " + toString());
    }
    if (displayName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'displayName' was not present! Struct: " + toString());
    }
    if (webUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'webUrl' was not present! Struct: " + toString());
    }
    if (apiUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'apiUrl' was not present! Struct: " + toString());
    }
    if (avatar == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'avatar' was not present! Struct: " + toString());
    }
    if (secureAvatarUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'secureAvatarUrl' was not present! Struct: " + toString());
    }
    if (badge == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'badge' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'canPostComment' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isPremoderated' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'hasCommented' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DiscussionUserProfileStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DiscussionUserProfileStandardScheme getScheme() {
      return new DiscussionUserProfileStandardScheme();
    }
  }

  private static class DiscussionUserProfileStandardScheme extends org.apache.thrift.scheme.StandardScheme<DiscussionUserProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DiscussionUserProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WEB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.webUrl = iprot.readString();
              struct.setWebUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // API_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiUrl = iprot.readString();
              struct.setApiUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SECURE_AVATAR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secureAvatarUrl = iprot.readString();
              struct.setSecureAvatarUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BADGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.badge = new java.util.ArrayList<DiscussionBadge>(_list10.size);
                @org.apache.thrift.annotation.Nullable DiscussionBadge _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new DiscussionBadge();
                  _elem11.read(iprot);
                  struct.badge.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setBadgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CAN_POST_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canPostComment = iprot.readBool();
              struct.setCanPostCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_PREMODERATED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPremoderated = iprot.readBool();
              struct.setIsPremoderatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HAS_COMMENTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasCommented = iprot.readBool();
              struct.setHasCommentedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCanPostComment()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'canPostComment' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsPremoderated()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isPremoderated' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHasCommented()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hasCommented' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DiscussionUserProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      if (struct.webUrl != null) {
        oprot.writeFieldBegin(WEB_URL_FIELD_DESC);
        oprot.writeString(struct.webUrl);
        oprot.writeFieldEnd();
      }
      if (struct.apiUrl != null) {
        oprot.writeFieldBegin(API_URL_FIELD_DESC);
        oprot.writeString(struct.apiUrl);
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        oprot.writeFieldBegin(AVATAR_FIELD_DESC);
        oprot.writeString(struct.avatar);
        oprot.writeFieldEnd();
      }
      if (struct.secureAvatarUrl != null) {
        oprot.writeFieldBegin(SECURE_AVATAR_URL_FIELD_DESC);
        oprot.writeString(struct.secureAvatarUrl);
        oprot.writeFieldEnd();
      }
      if (struct.badge != null) {
        oprot.writeFieldBegin(BADGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.badge.size()));
          for (DiscussionBadge _iter13 : struct.badge)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAN_POST_COMMENT_FIELD_DESC);
      oprot.writeBool(struct.canPostComment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PREMODERATED_FIELD_DESC);
      oprot.writeBool(struct.isPremoderated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_COMMENTED_FIELD_DESC);
      oprot.writeBool(struct.hasCommented);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DiscussionUserProfileTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DiscussionUserProfileTupleScheme getScheme() {
      return new DiscussionUserProfileTupleScheme();
    }
  }

  private static class DiscussionUserProfileTupleScheme extends org.apache.thrift.scheme.TupleScheme<DiscussionUserProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DiscussionUserProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.userId);
      oprot.writeString(struct.displayName);
      oprot.writeString(struct.webUrl);
      oprot.writeString(struct.apiUrl);
      oprot.writeString(struct.avatar);
      oprot.writeString(struct.secureAvatarUrl);
      {
        oprot.writeI32(struct.badge.size());
        for (DiscussionBadge _iter14 : struct.badge)
        {
          _iter14.write(oprot);
        }
      }
      oprot.writeBool(struct.canPostComment);
      oprot.writeBool(struct.isPremoderated);
      oprot.writeBool(struct.hasCommented);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DiscussionUserProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.userId = iprot.readString();
      struct.setUserIdIsSet(true);
      struct.displayName = iprot.readString();
      struct.setDisplayNameIsSet(true);
      struct.webUrl = iprot.readString();
      struct.setWebUrlIsSet(true);
      struct.apiUrl = iprot.readString();
      struct.setApiUrlIsSet(true);
      struct.avatar = iprot.readString();
      struct.setAvatarIsSet(true);
      struct.secureAvatarUrl = iprot.readString();
      struct.setSecureAvatarUrlIsSet(true);
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.badge = new java.util.ArrayList<DiscussionBadge>(_list15.size);
        @org.apache.thrift.annotation.Nullable DiscussionBadge _elem16;
        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
        {
          _elem16 = new DiscussionBadge();
          _elem16.read(iprot);
          struct.badge.add(_elem16);
        }
      }
      struct.setBadgeIsSet(true);
      struct.canPostComment = iprot.readBool();
      struct.setCanPostCommentIsSet(true);
      struct.isPremoderated = iprot.readBool();
      struct.setIsPremoderatedIsSet(true);
      struct.hasCommented = iprot.readBool();
      struct.setHasCommentedIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

